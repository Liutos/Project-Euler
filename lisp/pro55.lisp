(proclaim '(optimize speed))

(defun reverse+ (n)
  (labels ((rec (acc num)
	     (if (= 0 num)
		 (+ acc n)
		 (let ((r (rem num 10)))
		   (rec (+ (* 10 acc) r)
			(/ (- num r) 10))))))
    (rec 0 n)))

(defun palindromic (n)
  (labels ((rec (acc num)
	     (if (= 0 num)
		 (= acc n)
		 (let ((r (rem num 10)))
		   (rec (+ (* 10 acc) r)
			(/ (- num r) 10))))))
    (rec 0 n)))

(defun lychrelp (n)
  (labels ((rec (cnt test)
	     (cond ((> cnt 15) nil)
		   ((palindromic test)
		    (values t cnt test))
		   (t
		    (rec (1+ cnt) (reverse+ test))))))
    (rec 1 (reverse+ n))))

(defun pro55 ()
  (let ((cnt 0))
    (loop :for i :from 1 :upto (1- 10000)
       :do (if (lychrelp i)
	       (incf cnt)))
    cnt))