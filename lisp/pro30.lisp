(defun exptn-eql (number n)
  (labels ((rec (acc rest)
	     (cond ((and (zerop acc) (zerop rest)) t)
		   ((and (/= 0 acc) (zerop rest)) nil)
		   ((and (zerop acc) (/= 0 rest)) nil)
		   (t (let ((r (rem rest 10)))
			(rec (- acc (expt r n))
			     (/ (- rest r) 10)))))))
    (and (/= 1 number)
	 (rec number number))))

(defun pro30 ()
  (let ((sum 0))
    (dotimes (i (expt 10 7))
      (if (exptn-eql (1+ i) 5)
	  (incf sum (1+ i))))
    sum))