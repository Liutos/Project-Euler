(proclaim '(optimize speed))

(defun nth-gof (n prev-last)
  (let* ((init prev-last)
	 (len (- (* 2 n) 1))
	 (head (+ init len -1))
	 (dis (* 2 (- n 1))))
    (list head
	  (+ head dis)
	  (+ head (* 2 dis))
	  (+ head (* 3 dis)))))

(defun primep (n)
  (let ((bound (truncate (sqrt n))))
    (labels ((rec (test)
	       (cond ((> test bound) t)
		     ((= 0 (rem n test)) nil)
		     (t (rec (1+ test))))))
      (or (= 2 n)
	  (and (oddp n)
	       (rec 3))))))

(defun nth-ratio (n)
  (labels ((rec (numerator denominator n-layer prev-last)
	     (if (> n-layer n)
		 (values numerator denominator)
		 (destructuring-bind (rt lt lb rb)
		     (nth-gof n-layer prev-last)
		   (rec (+ numerator
			   (count-if #'primep (list rt lt lb rb)))
			(+ denominator 4)
			(1+ n-layer)
			rb)))))
    (rec 0 1 2 1)))

(defun pro58 ()
  (labels ((rec (numerator denominator n-layer prev-last)
	     (if (and (/= 0 numerator)
		      (< (* 10 numerator) denominator))
		 (values numerator denominator (- (* 2 n-layer) 1))
		 (destructuring-bind (rt lt lb rb)
		     (nth-gof n-layer prev-last)
		   (rec (+ numerator
			   (count-if #'primep (list rt lt lb rb)))
			(+ denominator 4)
			(1+ n-layer)
			rb)))))
    (rec 0 1 2 1)))