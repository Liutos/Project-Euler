(declaim (optimize (speed 3) (safety 0) (debug 0) (space 0)))

(defun next-ary (ary)
  (let ((len (length ary)))
    (labels ((rec (left right)
	       (cond ((zerop left) ary)
		     ((< right 0)
		      (rec (1- left) (- left 2)))
		     ((> (aref ary left)
			 (aref ary right))
		      (rotatef (aref ary left)
			       (aref ary right))
		      (let ((prt1 (subseq ary 0 (1+ right)))
			    (prt2 (subseq ary (1+ right))))
			(concatenate 'vector prt1 (sort prt2 #'<))))
		     (t (rec left (1- right))))))
      (rec (1- len) (- len 2)))))

(defun pro23 (ary cnt)
  (labels ((rec (a c)
	     (if (= cnt c)
		 a
		 (rec (next-ary a) (1+ c)))))
    (rec ary 1)))