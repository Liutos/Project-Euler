(proclaim '(optimize speed))

(defun factorial (n)
  (labels ((rec (acc m)
	     (if (= 0 m)
		 acc
		 (rec (* acc m) (- m 1)))))
    (rec 1 n)))

(defun nth-lexicographic-permutation (n digit-list)
  (labels ((rec (acc rest l nth)
	     (if (= 0 nth)
		 (reduce #'(lambda (sum x)
			     (+ (* 10 sum) x)) rest :initial-value acc)
		 (let ((fac (factorial l)))
		   (if (> fac nth)
		       (rec acc rest (- l 1) nth)
		       (let ((r (rem nth fac)))
			 (let ((q (/ (- nth r) fac)))
			   (let ((inc (nth q rest)))
			     (rec (+ (* 10 acc) inc)
				  (remove inc rest)
				  (- l 1)
				  r)))))))))
    (rec 0 digit-list (length digit-list) n)))

(defun pro24 ()
  (nth-lexicographic-permutation (1- (expt 10 6))
				 '(0 1 2 3 4 5 6 7 8 9)))