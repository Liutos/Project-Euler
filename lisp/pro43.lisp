(defun with-property-p (vec)
  (and (evenp (svref vec 3))
       (zerop (mod (+ (svref vec 2)
                      (svref vec 3)
                      (svref vec 4)) 3))
       (or (zerop (svref vec 5)) (= (svref vec 5) 5))
       (zerop (mod (+ (* 100 (svref vec 4))
                      (* 10 (svref vec 5))
                      (svref vec 6)) 7))
       (zerop (mod (+ (* 100 (svref vec 5))
                      (* 10 (svref vec 6))
                      (svref vec 7)) 11))
       (zerop (mod (+ (* 100 (svref vec 6))
                      (* 10 (svref vec 7))
                      (svref vec 8)) 13))
       (zerop (mod (+ (* 100 (svref vec 7))
                      (* 10 (svref vec 8))
                      (svref vec 9)) 17))))

(defun vector->integer (vec)
  (reduce #'(lambda (acc x)
              (+ (* 10 acc) x))
          vec :initial-value 0))

;; 全排列算法来自这里：http://www.cnblogs.com/nokiaguy/archive/2008/05/11/1191914.html
(defun perm (vec k m)
  (if (> k m)
      (if (zerop (svref vec 0))
          0
          (if (with-property-p vec)
              (vector->integer vec)
              0))
      (let ((cnt 0))
        (dotimes (_i (1+ (- m k)) cnt)
          (let ((i (+ _i k)))
            (rotatef (svref vec k) (svref vec i))
            (incf cnt (perm vec (1+ k) m))
            (rotatef (svref vec k) (svref vec i)))))))

(defun pro43 ()
  (perm #(0 1 2 3 4 5 6 7 8 9) 0 9))
