(defun smallest-factor (n)
  (labels ((rec (test)
	     (if (or (>= test n) (zerop (rem n test)))
		 test
		 (rec (1+ test)))))
    (rec 2)))

(defun factor-numbers-4-p (n)
  (let ((hs (make-hash-table :test #'eql)))
    (labels ((rec (acc num)
	       (cond ((= 1 num)
		      (= 4 acc))
		     ((> acc 4) nil)
		     (t
		      (let ((fac (smallest-factor num)))
			(if (gethash fac hs)
			    (rec acc (/ num fac))
			    (progn
			      (setf (gethash fac hs) t)
			      (rec (1+ acc) (/ num fac)))))))))
      (rec 0 n))))

(defun helper (n)
  (if (not (factor-numbers-4-p n))
      (values nil n)
      (if (not (factor-numbers-4-p (+ n 1)))
	  (values nil (+ n 1))
	  (if (not (factor-numbers-4-p (+ n 2)))
	      (values (+ n 2))
	      (if (not (factor-numbers-4-p (+ n 3)))
		  (values (+ n 3))
		  (values t n))))))

(defun pro47 ()
  (labels ((rec (test)
	     (multiple-value-bind (result val)
		 (helper test)
	       (if (null result)
		   (rec (1+ val))
		   test))))
    (rec 210)))